/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ifes.poo2.oficinamecanica.cgd;

import br.ifes.poo2.oficinamecanica.cdp.Pessoa;
import br.ifes.poo2.oficinamecanica.cdp.PessoaPrototipo;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.List;

/**
 *
 * @author RafaelBroedel
 */
public class PessoaDAO extends DAOGeneric implements DAO<Pessoa> {

        
	//CRIANDO A TABELA PESSOA
	public void criarTabela() throws ClassNotFoundException, SQLException
	{
		this.openConnection();
		
		this.execute("DROP TABLE IF EXISTS PESSOA");
		
		String sql = "CREATE TABLE PESSOA " +
					 " (ID INTEGER GENERATED BY DEFAULT AS IDENTITY "+
                     " (START WITH 1, INCREMENT BY 1) NOT NULL," +
					 " NOME varchar(255) NOT NULL," +
					 " EMAIL varchar(255) NOT NULL," +
					 " ENDERECO varchar(255) NOT NULL," +
					 " CPF BIGINT NOT NULL," +
					 " NASCIMENTO varchar(255) NOT NULL," +
					 " TIPO varchar(255) NOT NULL," +
					 " CARTEIRA_DE_TRABALHO BIGINT," +
					 " SALARIO_FIXO DOUBLE," +
					 " PRIMARY KEY (ID) )";
		
		this.execute(sql);
		
		this.closeConnection();
	}

        @Override
	public void insert(Pessoa obj) throws SQLException, ClassNotFoundException {
		
		this.openConnection();
		
		String sql = "INSERT INTO PESSOA (NOME, EMAIL, ENDERECO, CPF, NASCIMENTO, TIPO, CARTEIRA_DE_TRABALHO, SALARIO_FIXO)"
                        + "VALUES ('"+obj.getNome()+"',"
                        + "'"+obj.getEmail()+"',"
                        + "'"+obj.getEndereco()+"',"
                        + "'"+obj.getCpf()+"',"
                        + "'"+obj.getNascimento()+"',"
                        + "'"+obj.getTipo().name()+"',"
                        + "'"+obj.getCarteiraDeTrabalho()+"',"
                        + "'"+obj.getSalarioFixo()+"')";
		
		int id = this.executeUpdate(sql);
		
		obj.setId(id);
		
		this.closeConnection();
		
	}

        @Override
	public void update(Pessoa obj) throws SQLException, ClassNotFoundException {
		this.openConnection();
		
		String sql = "UPDATE PESSOA SET "
                        + "NOME = '"+obj.getNome()
                        + "', EMAIL = '"+obj.getEmail()
                        + "', ENDERECO = '"+obj.getEndereco()
                        + "', CPF = '"+obj.getCpf()
                        + "', NASCIMENTO = '"+obj.getNascimento()
                        + "', TIPO = '"+obj.getTipo().name()
                        + "', CARTEIRA_DE_TRABALHO = '"+obj.getCarteiraDeTrabalho()
                        + "', SALARIO_FIXO = '"+obj.getSalarioFixo()
                        + "' WHERE ID = " +obj.getId(); 
		
                this.executeUpdate(sql);
		
		this.closeConnection();
		
	}

        @Override
	public void delete(Pessoa obj) throws SQLException, ClassNotFoundException {
		this.openConnection();
		
		String sql = "DELETE FROM PESSOA WHERE ID = " +obj.getId(); 
		
                this.executeUpdate(sql);
		
		this.closeConnection();
		
	}

        @Override
	public Pessoa findbyID(Long id) throws ClassNotFoundException, SQLException {
		//Query para buscar o usuario
		this.openConnection();
		
		String sql = "SELECT * FROM PESSOA WHERE ID ="+id;
		
		ResultSet rs = this.executeQuery(sql);
		
		List<Pessoa> pessoas = retrivePessoas(rs);
		
		this.closeConnection();
		if (pessoas.isEmpty()){
                        throw new EmptyStackException();
                }
                return pessoas.get(0);
	}
        @Override
	public List<Pessoa> findAll() throws SQLException, ClassNotFoundException {
		// TODO Auto-generated method stub
		this.openConnection();
		
		String sql = "SELECT * FROM PESSOA ";
		
		ResultSet rs = this.executeQuery(sql);
		
		List<Pessoa> pessoas = retrivePessoas(rs);
		
		this.closeConnection();
		
		return pessoas;
	}
	
	private List<Pessoa> retrivePessoas(ResultSet rs) throws SQLException
	{
		List<Pessoa> pessoas = new ArrayList<Pessoa>();
		
		while (rs.next())
		{
                        String tipo = rs.getString("TIPO");
                        Pessoa pessoa = null;
                        
                        if(null != tipo)switch (tipo) {
                        case "VENDEDOR":
                            pessoa = new PessoaPrototipo(Pessoa.Tipo.VENDEDOR);
                            break;
                        case "GERENTE":
                            pessoa = new PessoaPrototipo(Pessoa.Tipo.GERENTE);
                            break;
                        case "CLIENTE":
                            pessoa = new PessoaPrototipo(Pessoa.Tipo.CLIENTE);
                            break;
                        default:
                            
                            break;
                    }
			
			pessoa.setId(rs.getInt("ID"));
			pessoa.setNome(rs.getString("NOME"));
                        pessoa.setEmail(rs.getString("EMAIL"));
                        pessoa.setEndereco(rs.getString("ENDERECO"));
                        pessoa.setCpf(rs.getLong("CPF"));
                        pessoa.setNascimento(rs.getString("NASCIMENTO"));
                        pessoa.setSalarioFixo(rs.getDouble("SALARIO_FIXO"));
                        pessoa.setCarteiraDeTrabalho(rs.getLong("CARTEIRA_DE_TRABALHO"));

			pessoas.add(pessoa);
		}
		
		return pessoas;
	}
}