/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ifes.poo2.oficinamecanica.cgd;

import br.ifes.poo2.oficinamecanica.cdp.Pessoa;
import br.ifes.poo2.oficinamecanica.cdp.Venda;
import br.ifes.poo2.oficinamecanica.cdp.VendaPrototipo;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.List;

/**
 *
 * @author RafaelBroedel
 */
public class VendaDAO extends DAOGeneric implements DAO<Venda> {

        
	//CRIANDO A TABELA VENDA
	public void criarTabela() throws ClassNotFoundException, SQLException
	{
		this.openConnection();
		
		this.execute("DROP TABLE IF EXISTS VENDA");
		
		String sql = "CREATE TABLE VENDA " +
					 " (ID INTEGER GENERATED BY DEFAULT AS IDENTITY "+
                     " (START WITH 1, INCREMENT BY 1) NOT NULL," +
					 " DESCRICAO varchar(255) NOT NULL," +
					 " DATA_DA_VENDA varchar(255) NOT NULL," +
					 " STATUS varchar(255) NOT NULL," +
					 " TIPO varchar(255) NOT NULL," +
					 " VALOR_UNITARIO DOUBLE NOT NULL," +
					 " QUANTIDADE INTEGER NOT NULL," +
					 " ID_VENDEDOR INTEGER NOT NULL," +
					 " FOREING JEY (ID_VENDEDOR) REFERENCES PESSOA (ID)," +
					 " PRIMARY KEY (ID) )";
		
		this.execute(sql);
		
		this.closeConnection();
	}

        @Override
	public void insert(Venda obj) throws SQLException, ClassNotFoundException {
		
		this.openConnection();
		
		String sql = "INSERT INTO VENDA (DESCRICAO, DATA_DA_VENDA, STATUS, TIPO, VALOR_UNITARIO, QUANTIDADE, ID_VENDEDOR)"
                        + "VALUES ('"+obj.getDescricao()+"',"
                        + "'"+obj.getDataDaVenda()+"',"
                        + "'"+obj.getStatus().name()+"',"
                        + "'"+obj.getTipo().name()+"',"
                        + "'"+obj.getValorUnitario()+"',"
                        + "'"+obj.getQuantidade()+"',"
                        + "'"+obj.getVendedor().getId()+"')";
		
		int id = this.executeUpdate(sql);
		
		obj.setId(id);
		
		this.closeConnection();
		
	}

        @Override
	public void update(Venda obj) throws SQLException, ClassNotFoundException {
		this.openConnection();
		
		String sql = "UPDATE VEICULO SET "
                        + "DESCRICA = '"+obj.getDescricao()
                        + "', DATA_DA_VENDA = '"+obj.getDataDaVenda()
                        + "', STATUS = '"+obj.getStatus().name()
                        + "', TIPO = '"+obj.getTipo().name()
                        + "', VALOR_UNITARIO = '"+obj.getValorUnitario()
                        + "', QUANTIDADE = '"+obj.getQuantidade()
                        + "', ID_VENDEDOR = '"+obj.getVendedor().getId()
                        + "' WHERE ID = " +obj.getId(); 
		
                this.executeUpdate(sql);
		
		this.closeConnection();
		
	}

        @Override
	public void delete(Venda obj) throws SQLException, ClassNotFoundException {
		this.openConnection();
		
		String sql = "DELETE FROM VENDA WHERE ID = " +obj.getId(); 
		
                this.executeUpdate(sql);
		
		this.closeConnection();
		
	}

        @Override
	public Venda findbyID(Long id) throws ClassNotFoundException, SQLException {
		//Query para buscar o usuario
		this.openConnection();
		
		String sql = "SELECT * FROM VEICULO WHERE ID ="+id;
		
		ResultSet rs = this.executeQuery(sql);
		
		List<Venda> objetos = retriveObjetos(rs);
		
		this.closeConnection();
		if (objetos.isEmpty()){
                        throw new EmptyStackException();
                }
                return objetos.get(0);
	}
        @Override
	public List<Venda> findAll() throws SQLException, ClassNotFoundException {
		// TODO Auto-generated method stub
		this.openConnection();
		
		String sql = "SELECT * FROM VENDA ";
		
		ResultSet rs = this.executeQuery(sql);
		
		List<Venda> objetos = retriveObjetos(rs);
		
		this.closeConnection();
		
		return objetos;
	}
	
	private List<Venda> retriveObjetos(ResultSet rs) throws SQLException, ClassNotFoundException
	{
		List<Venda> objetos = new ArrayList<Venda>();
		
		while (rs.next())
		{
                        String tipo = rs.getString("TIPO");
                        String status = rs.getString("STATUS");
                        long idVendedor = rs.getLong("ID_VENDEDOR");
                        
                        Venda objeto = null;
                        
                        if(null != tipo)switch (tipo) {
                        case "PRODUTO":
                            objeto = new VendaPrototipo(Venda.Tipo.PRODUTO);
                            break;
                        case "SERVICO":
                            objeto = new VendaPrototipo(Venda.Tipo.SERVICO);
                            break;
                        default:
                            
                            break;
                        }
                        
                        if(null != status)switch (status) {
                        case "ABERTO":
                            objeto.setStatus(Venda.Status.ABERTO);
                            break;
                        case "CONCLUIDO":
                            objeto.setStatus(Venda.Status.CONCLUIDO);
                            break;
                        case "EMEXECUCAO":
                            objeto.setStatus(Venda.Status.EMEXECUCAO);
                            break;
                        case "INSTALADO":
                            objeto.setStatus(Venda.Status.INSTALADO);
                            break;
                        case "NAFILA":
                            objeto.setStatus(Venda.Status.NAFILA);
                            break;
                        default:
                            
                            break;
                        }
			
			objeto.setId(rs.getInt("ID"));
			objeto.setDescricao(rs.getString("DESCRICAO"));
                        objeto.setDataDaVenda(rs.getString("DATA_DA_VENDA"));
                        objeto.setQuantidade(rs.getInt("QUANTIDADE"));
                        objeto.setValorUnitario(rs.getDouble("VALOR_UNITARIO"));
                        
                        DAO pessoaDAO = new PessoaDAO();
                        Pessoa pessoa = (Pessoa) pessoaDAO.findbyID(idVendedor);
                        objeto.setVendedor(pessoa);
                        
			objetos.add(objeto);
		}
		
		return objetos;
	}
}

